import numpy as np
import time as t
from collections import defaultdict
from scipy.spatial.distance import cdist
from PIL import Image
from concurrent.futures import ProcessPoolExecutor, as_completed

def rgb_to_lab_batch(colors):
    colors = np.array(colors) / 255.0
    mask = colors > 0.04045
    colors[mask] = ((colors[mask] + 0.055) / 1.055) ** 2.4
    colors[~mask] /= 12.92
    colors *= 100

    xyz = np.dot(colors, [[0.4124, 0.3576, 0.1805],
                          [0.2126, 0.7152, 0.0722],
                          [0.0193, 0.1192, 0.9505]])

    xyz /= [95.047, 100.0, 108.883]
    mask = xyz > 0.008856
    xyz[mask] **= (1/3)
    xyz[~mask] = (7.787 * xyz[~mask]) + (16 / 116)

    lab = np.zeros_like(xyz)
    lab[:, 0] = (116 * xyz[:, 1]) - 16
    lab[:, 1] = 500 * (xyz[:, 0] - xyz[:, 1])
    lab[:, 2] = 200 * (xyz[:, 1] - xyz[:, 2])
    
    return lab

def process_chunk(chunk, val_colors, key_colors):
    lookup = {}
    count_map = defaultdict(int)
    for clr in chunk:
        clr_tuple = tuple(clr)
        if clr_tuple in lookup:
            dist = lookup[clr_tuple]
        else:
            dist = np.argmin(cdist(val_colors, clr.reshape(1, 3), metric='cityblock'))
            lookup[clr_tuple] = dist
        count_map[key_colors[dist]] += 1
    return count_map

def fetch_colors(req):
    st = t.time()
    global img_file, img_instance

    if req.method == "POST":
        form = UploadImage(req.POST, req.FILES)
        if form.is_valid():
            if 'img' in req.FILES:
                save = form.save()
                img_instance = form.instance
                img_file = os.path.join(settings.MEDIA_ROOT, str(save.img))

            image = img_instance

            img_path = img_file
            with Image.open(img_path) as img_obj:
                w, h = img_obj.size
                total = w * h
                img_colors = np.array(img_obj.getdata())

                color_map_lab = {key: rgb_to_lab(val) for key, val in color_map.items()}
                key_colors = list(color_map_lab.keys())
                val_colors = np.array(list(color_map_lab.values()))

                if img_obj.mode == 'L':
                    return render(req, 'show_color_shades.html', {'form': form, 'msg': "The image is Grayscale."})

                img_colors_lab = rgb_to_lab_batch(img_colors[:, :3])

                # Split the data into chunks
                num_chunks = 8  # Adjust this based on the number of CPU cores available
                chunks = np.array_split(img_colors_lab, num_chunks)

                # Process each chunk in parallel
                with ProcessPoolExecutor() as executor:
                    futures = [executor.submit(process_chunk, chunk, val_colors, key_colors) for chunk in chunks]
                    results = defaultdict(int)
                    for future in as_completed(futures):
                        chunk_result = future.result()
                        for key, value in chunk_result.items():
                            results[key] += value

                res = {get_color(val): round((results[clr] / total) * 100, 2) for clr, val in color_map.items() if clr in results}
                k = min(len(res), int(req.POST['drop_down']))
                res = dict(sorted(res.items(), key=lambda item: item[1], reverse=True)[:k])

                context = {
                    'form': form,
                    'image': image,
                    'top_colors': res
                }

            en = t.time()
            print(f"\ntime: {en-st}\n")
            return render(req, 'show_color_shades.html', context)

    else:
        form = UploadImage()
    images = Upload.objects.all()
    return render(req, 'show_color_shades.html', {"images": images, 'form': form})
----------------------------------------------------------------------------------------------------------------------------------------------------------
import os
import time as t
from collections import defaultdict
from concurrent.futures import ProcessPoolExecutor, as_completed

import numpy as np
from PIL import Image
from scipy.spatial.distance import cdist

# Example color map and utility functions
color_map = {
    'Red': (255, 0, 0),
    'Green': (0, 255, 0),
    'Blue': (0, 0, 255),
    'Yellow': (255, 255, 0),
    'Cyan': (0, 255, 255),
    'Magenta': (255, 0, 255),
    'White': (255, 255, 255),
    'Black': (0, 0, 0),
}

def rgb_to_lab(color):
    num = 0
    rgb = [0, 0, 0]
    for clr in color:
        clr = float(clr) / 255
        if clr > 0.04045:
            clr = ((clr + 0.055) / 1.055) ** 2.4
        else:
            clr /= 12.92
        rgb[num] = clr * 100
        num += 1

    xyz = [0, 0, 0]
    x = rgb[0] * 0.4124 + rgb[1] * 0.3576 + rgb[2] * 0.1805
    y = rgb[0] * 0.2126 + rgb[1] * 0.7152 + rgb[2] * 0.0722
    z = rgb[0] * 0.0193 + rgb[1] * 0.1192 + rgb[2] * 0.9505

    xyz[0] = round(x, 4)
    xyz[1] = round(y, 4)
    xyz[2] = round(z, 4)

    xyz[0] = float(xyz[0]) / 95.047
    xyz[1] = float(xyz[1]) / 100.0
    xyz[2] = float(xyz[2]) / 108.883

    num = 0
    for clr in xyz:
        if clr > 0.008856:
            clr = clr ** (0.3333333333333333)
        else:
            clr = (7.787 * clr) + (16 / 116)
        xyz[num] = clr
        num += 1

    lab = [0, 0, 0]
    l = (116 * xyz[1]) - 16
    a = 500 * (xyz[0] - xyz[1])
    b = 200 * (xyz[1] - xyz[2])
    lab[0] = round(l, 4)
    lab[1] = round(a, 4)
    lab[2] = round(b, 4)

    return lab

def rgb_to_lab_batch(colors):
    colors = np.array(colors) / 255.0
    mask = colors > 0.04045
    colors[mask] = ((colors[mask] + 0.055) / 1.055) ** 2.4
    colors[~mask] /= 12.92
    colors *= 100

    xyz = np.dot(colors, [[0.4124, 0.3576, 0.1805],
                          [0.2126, 0.7152, 0.0722],
                          [0.0193, 0.1192, 0.9505]])

    xyz /= [95.047, 100.0, 108.883]
    mask = xyz > 0.008856
    xyz[mask] **= (1/3)
    xyz[~mask] = (7.787 * xyz[~mask]) + (16 / 116)

    lab = np.zeros_like(xyz)
    lab[:, 0] = (116 * xyz[:, 1]) - 16
    lab[:, 1] = 500 * (xyz[:, 0] - xyz[:, 1])
    lab[:, 2] = 200 * (xyz[:, 1] - xyz[:, 2])
    
    return lab

def fetch_colors(req):
    st = t.time()
    global img_file, img_instance

    if req.method == "POST":
        form = UploadImage(req.POST, req.FILES)
        if form.is_valid():
            if 'img' in req.FILES:
                save = form.save()
                img_instance = form.instance
                img_file = os.path.join(settings.MEDIA_ROOT, str(save.img))

            image = img_instance

            img_path = img_file
            with Image.open(img_path) as img_obj:
                w, h = img_obj.size
                total = w * h
                img_colors = np.array(img_obj.getdata())

                color_map_lab = {key: rgb_to_lab(val) for key, val in color_map.items()}
                key_colors = list(color_map_lab.keys())
                val_colors = np.array(list(color_map_lab.values()))

                if img_obj.mode == 'L':
                    return render(req, 'show_color_shades.html', {'form': form, 'msg': "The image is Grayscale."})

                # Filter out colors that are too similar
                filtered_colors = []
                for clr in img_colors[:, :3]:
                    lab_color = rgb_to_lab(clr)
                    if all(cdist([lab_color], [lab], metric='cityblock') > 10 for lab in val_colors):
                        filtered_colors.append(clr)

                filtered_colors = np.array(filtered_colors)

                # Split the filtered colors into chunks for parallel processing
                num_chunks = 8  # Adjust this based on the number of CPU cores available
                color_chunks = np.array_split(filtered_colors, num_chunks)

                with ProcessPoolExecutor() as executor:
                    futures = [executor.submit(rgb_to_lab_batch, chunk) for chunk in color_chunks]
                    img_colors_lab = np.vstack([future.result() for future in as_completed(futures)])

                # Split the Lab colors into chunks for parallel distance calculations
                chunks = np.array_split(img_colors_lab, num_chunks)

                with ProcessPoolExecutor() as executor:
                    futures = [executor.submit(process_chunk, chunk, val_colors, key_colors) for chunk in chunks]
                    results = defaultdict(int)
                    for future in as_completed(futures):
                        chunk_result = future.result()
                        for key, value in chunk_result.items():
                            results[key] += value

                res = {get_color(val): round((results[clr] / total) * 100, 2) for clr, val in color_map.items() if clr in results}
                k = min(len(res), int(req.POST['drop_down']))
                res = dict(sorted(res.items(), key=lambda item: item[1], reverse=True)[:k])

                context = {
                    'form': form,
                    'image': image,
                    'top_colors': res
                }

            en = t.time()
            print(f"\ntime: {en-st}\n")
            return render(req, 'show_color_shades.html', context)

    else:
        form = UploadImage()
    images = Upload.objects.all()
    return render(req, 'show_color_shades.html', {"images": images, 'form': form})

# Helper function for distance calculation
def process_chunk(chunk, val_colors, key_colors):
    lookup = {}
    count_map = defaultdict(int)
    for clr in chunk:
        clr_tuple = tuple(clr)
        if clr_tuple in lookup:
            dist = lookup[clr_tuple]
        else:
            dist = np.argmin(cdist(val_colors, clr.reshape(1, 3), metric='cityblock'))
            lookup[clr_tuple] = dist
        count_map[key_colors[dist]] += 1
    return count_map
