
def get_representative_sentences(sentences, clusters, cluster_centers, num_representatives=1):
    representative_sentences = []
    for cluster_id in range(cluster_centers.shape[0]):
        # Find the sentences belonging to the current cluster
        cluster_sentences = [sentences[i] for i in range(len(sentences)) if clusters[i] == cluster_id]
        
        # Choose representative sentences: 1 from numeric and 1 from non-numeric if possible
        representative_numeric = None
        representative_non_numeric = None
        
        for sentence in cluster_sentences:
            if pattern.search(sentence):
                if representative_numeric is None:
                    representative_numeric = sentence
            else:
                if representative_non_numeric is None:
                    representative_non_numeric = sentence
            
            # If both types are found, break
            if representative_numeric and representative_non_numeric:
                break
        
        if representative_numeric:
            representative_sentences.append(representative_numeric)
        elif representative_non_numeric:
            representative_sentences.append(representative_non_numeric)
        elif cluster_sentences:
            # If no type is found, take any sentence from the cluster
            representative_sentences.append(cluster_sentences[0])

    return representative_sentences, representative_numeric,  ihn.