red = [(128,0,0), (139, 0, 0), (165, 42, 42), (178, 34, 34), (220, 20, 60), (255, 0, 0), (255, 99, 71), (255, 127, 80), (205, 92, 92), (240, 128, 128), (233, 150, 122), (250, 128, 114), (255, 160, 122), (255, 69, 0)]
orange = [(255, 69, 0), (255, 140, 0), (255, 165, 0)]
green = [(255, 255, 0), (154, 205, 50), (85, 107, 47), (107, 142, 35), (124, 252, 0), (127, 255, 0), (173, 255, 47), (0, 100, 0), (0, 128, 0), (34, 139, 34), (0, 255, 0), (50, 205, 50), (144, 238, 144), (152, 251, 152), (143, 188, 143), (0, 250, 154), (0, 255, 127), (46, 139, 87), (102, 205, 170), (60, 179, 113), (32, 178, 170), (47, 79, 79), (0, 128, 128), (0, 139, 139)
]
blue = (70, 130, 180), (100, 149, 237), (0, 191, 255), (30, 144, 255), (173, 216, 230), (135, 206, 235), (135, 206, 250), (25, 25, 112), (0, 0, 128), (0, 0, 139), (0, 0, 205), (0, 0, 255), (65, 105, 225), (138, 43, 226), (75, 0, 130), (72, 61, 139)



    [128, 0, 0],
    [139, 0, 0],
    [165, 42, 42],
    [178, 34, 34],
    [220, 20, 60],
    [255, 0, 0],
    [255, 99, 71],
    [255, 127, 80],
    [205, 92, 92],
    [240, 128, 128],
    [233, 150, 122],
    [250, 128, 114],
    [255, 160, 122],
    [255, 69, 0],
    [255, 69, 0],
    [255, 140, 0],
    [255, 165, 0],
    [255, 255, 0],
    [154, 205, 50],
    [85, 107, 47],
    [107, 142, 35],
    [124, 252, 0],
    [127, 255, 0],
    [173, 255, 47],
    [0, 100, 0],
    [0, 128, 0],
    [34, 139, 34],
    [0, 255, 0],
    [50, 205, 50],
    [144, 238, 144],
    [152, 251, 152],
    [143, 188, 143],
    [0, 250, 154],
    [0, 255, 127],
    [46, 139, 87],
    [102, 205, 170],
    [60, 179, 113],
    [32, 178, 170],
    [47, 79, 79],
    [0, 128, 128],
    [0, 139, 139],
    [70, 130, 180],
    [100, 149, 237],
    [0, 191, 255],
    [30, 144, 255],
    [173, 216, 230],
    [135, 206, 235],
    [135, 206, 250],
    [25, 25, 112],
    [0, 0, 128],
    [0, 0, 139],
    [0, 0, 205],
    [0, 0, 255],
    [65, 105, 225],

(128, 0, 0): 'Dark Red',
    (139, 0, 0): 'Dark Red',
    (165, 42, 42): 'Brown Red',
    (178, 34, 34): 'Firebrick',
    (220, 20, 60): 'Crimson',
    (255, 0, 0): 'Red',
    (255, 99, 71): 'Tomato',
    (255, 127, 80): 'Coral',
    (205, 92, 92): 'Indian Red',
    (240, 128, 128): 'Light Coral',
    (233, 150, 122): 'Dark Salmon',
    (250, 128, 114): 'Salmon',
    (255, 160, 122): 'Light Salmon',
    (255, 69, 0): 'Red-Orange',
    (255, 69, 0): 'Red-Orange',  # Duplicate entry
    (255, 140, 0): 'Orange Red',
    (255, 165, 0): 'Orange',
    (255, 255, 0): 'Yellow',
    (154, 205, 50): 'Yellow Green',
    (85, 107, 47): 'Dark Olive Green',
    (107, 142, 35): 'Olive Drab',
    (124, 252, 0): 'Lawn Green',
    (127, 255, 0): 'Chartreuse',
    (173, 255, 47): 'Green Yellow',
    (0, 100, 0): 'Dark Green',
    (0, 128, 0): 'Green',
    (34, 139, 34): 'Forest Green',
    (0, 255, 0): 'Lime',
    (50, 205, 50): 'Lime Green',
    (144, 238, 144): 'Light Green',
    (152, 251, 152): 'Pale Green',
    (143, 188, 143): 'Dark Sea Green',
    (0, 250, 154): 'Medium Spring Green',
    (0, 255, 127): 'Spring Green',
    (46, 139, 87): 'Sea Green',
    (102, 205, 170): 'Medium Aqua Marine',
    (60, 179, 113): 'Medium Sea Green',
    (32, 178, 170): 'Light Sea Green',
    (47, 79, 79): 'Dark Slate Gray',
    (0, 128, 128): 'Teal',
    (0, 139, 139): 'Dark Cyan',
    (70, 130, 180): 'Steel Blue',
    (100, 149, 237): 'Cornflower Blue',
    (0, 191, 255): 'Deep Sky Blue',
    (30, 144, 255): 'Dodger Blue',
    (173, 216, 230): 'Light Blue',
    (135, 206, 235): 'Sky Blue',
    (135, 206, 250): 'Light Sky Blue',
    (25, 25, 112): 'Midnight Blue',
    (0, 0, 128): 'Navy',
    (0, 0, 139): 'Dark Blue',
    (0, 0, 205): 'Medium Blue',
    (0, 0, 255): 'Blue',
    (65, 105, 225): 'Royal Blue',
    (138, 43, 226): 'Blue Violet',
    (75, 0, 130): 'Indigo',
    (72, 61, 139): 'Dark Slate Blue'
    [138, 43, 226],
    [75, 0, 130],
    [72, 61, 139]



import os
from collections import defaultdict, Counter
from django.shortcuts import render
from skimage.color import rgb2lab, deltaE_cie76
import numpy as np
from PIL import Image
from .forms import UploadImage
from .models import Upload

# Define your color palette in RGB
color_palette = {
    'Dark Red': (128, 0, 0),
    'Brown Red': (165, 42, 42),
    'Firebrick': (178, 34, 34),
    'Crimson': (220, 20, 60),
    'Red': (255, 0, 0),
    'Tomato': (255, 99, 71),
    'Coral': (255, 127, 80),
    'Indian Red': (205, 92, 92),
    'Light Coral': (240, 128, 128),
    'Dark Salmon': (233, 150, 122),
    'Salmon': (250, 128, 114),
    'Light Salmon': (255, 160, 122),
    'Red-Orange': (255, 69, 0),
    'Orange Red': (255, 140, 0),
    'Orange': (255, 165, 0),
    'Yellow': (255, 255, 0),
    'Yellow Green': (154, 205, 50),
    'Dark Olive Green': (85, 107, 47),
    'Olive Drab': (107, 142, 35),
    'Lawn Green': (124, 252, 0),
    'Chartreuse': (127, 255, 0),
    'Green Yellow': (173, 255, 47),
    'Dark Green': (0, 100, 0),
    'Green': (0, 128, 0),
    'Forest Green': (34, 139, 34),
    'Lime': (0, 255, 0),
    'Lime Green': (50, 205, 50),
    'Light Green': (144, 238, 144),
    'Pale Green': (152, 251, 152),
    'Dark Sea Green': (143, 188, 143),
    'Medium Spring Green': (0, 250, 154),
    'Spring Green': (0, 255, 127),
    'Sea Green': (46, 139, 87),
    'Medium Aqua Marine': (102, 205, 170),
    'Medium Sea Green': (60, 179, 113),
    'Light Sea Green': (32, 178, 170),
    'Dark Slate Gray': (47, 79, 79),
    'Teal': (0, 128, 128),
    'Dark Cyan': (0, 139, 139),
    'Steel Blue': (70, 130, 180),
    'Cornflower Blue': (100, 149, 237),
    'Deep Sky Blue': (0, 191, 255),
    'Dodger Blue': (30, 144, 255),
    'Light Blue': (173, 216, 230),
    'Sky Blue': (135, 206, 235),
    'Light Sky Blue': (135, 206, 250),
    'Midnight Blue': (25, 25, 112),
    'Navy': (0, 0, 128),
    'Dark Blue': (0, 0, 139),
    'Medium Blue': (0, 0, 205),
    'Blue': (0, 0, 255),
    'Royal Blue': (65, 105, 225),
    'Blue Violet': (138, 43, 226),
    'Indigo': (75, 0, 130),
    'Dark Slate Blue': (72, 61, 139)
}


def close_color(color):
    colors = np.array(colors_list)
    color = np.array(color)
    dist = np.sqrt(np.sum((colors-color)**2, axis = 1))
    color_keys = list(color_pallette.keys())
    return color_keys[np.argmin(dist)]

def get_color(color):
    return 'rgb({},{},{})'.format(*color)

def fetch_top_colors(req):
    global img_file, img_instance
    if req.method == "POST":
        form = UploadImage(req.POST, req.FILES)
        if form.is_valid():
            if 'img' in req.FILES:
                save = form.save()
                img_instance = form.instance
                img_file = os.path.join(settings.MEDIA_ROOT, str(save.img))
            # save = form.save()
            image = img_instance
            k = req.POST['drop_down']
            #img_path = os.path.join(settings.MEDIA_ROOT, str(save.img))
            img_path = img_file
            with Image.open(img_path) as img_obj:
                
                img_colors = list(img_obj.getdata())
                check_clr = {}
                color = []
                if img_obj.mode=='L':
                    return render(req, 'color_info.html',{'form':form,'msg':"The image is Grayscale."})
                for clr in img_colors:
                    color.append(tuple(close_color(clr[:3])))
                colors = defaultdict(int)
                
                for clr in color :
                    colors[clr]+=1
                colors = dict(sorted(colors.items(), key = lambda item: item[1], reverse=True))
                
            
               
                colors = dict(list(colors.items()))
                color_dict = {}
                
                for clr, cnt in Counter(colors).items():
                    
                    if clr in color_green_list:
                        clr = color_green
                    elif clr in color_yellow_list:
                        clr = color_yellow
                    elif clr in color_blue_list:
                        clr = color_blue
                    elif clr in color_purple_list:
                        clr = color_purple
                    elif clr in color_red_list:
                        clr = color_red
                    elif clr in color_black_list:
                        clr = color_black 
                    elif clr in color_orange_list:
                        clr = color_orange
                    elif clr in color_white_list:
                        clr = color_white
                    color_dict[clr] = cnt

                total = sum(Counter(color_dict).values())
                k = min(len(color_dict), int(k))
                for clr, cnt in Counter(color_dict).items():
                    print(f"cnt: {cnt}, total: {total}, perc: {round((cnt/total)*100, 4)}")
                    color_dict[clr] = round((cnt/total)*100, 4)
                    
                color_dict = {get_color(clr):val for clr, val in colors.items()}
                # color_dict = dict(sorted(color_dict.items(), key = lambda item: item[1], reverse=True))
                color_dict = dict(list(color_dict.items())[:k])
                color_dict = dict(sorted(color_dict.items(), key = lambda item: item[1], reverse=True))
                
                for clr, cnt in Counter(color_dict).items():
                    print(f"cnt: {cnt}, total: {total}, perc: {round((cnt/total)*100, 4)}")
                    print(f"color: {clr}: {color_dict[clr]}\n")
                context = {
                    'form': form,
                    'image': image,
                    'top_colors': color_dict
                }

                
            return render(req, 'color_info.html',context)
    else:
        form = UploadImage()
    images = Upload.objects.all()
    return render(req, 'color_info.html',{"images":images,'form':form})



color_pallette = {
    (255,0,0): 'Red',
    (0,0,255): 'Blue',
    (0,255,0): 'Green',
    (255,255,0): 'Dark Yellow',
    (255,255,255): 'White',
    (0,0,0): 'Black',
    (153,76,0): 'Brown',
    (255,128,0): 'Orange',
    (153,0,153): 'Magenta',
    (255,0,255): 'Pink',
    (255,255,102): 'Yellow',
    (0,0,102): 'Dark Blue',
    (0,153,0): 'Dark Green',
    (0,255,255): 'Aqua',
    (102,0, 102): 'Purple',
    (51,255,255): 'Color', 
    (127,0,255): 'Color', 
    (153,153,0): 'Olive',
    (51,255,153): 'Cyan',
    (51,0,51): 'Dark Purple',
    (204,0,0): 'Dark Red',
    (255,51,51): 'Light Red',
    (51,153,255): 'Light Blue',
    (255,255,204): 'Light Yellow',
    (0, 244, 244): 'Pea Green',
    (0,0,51): 'Black',
    (0,25,51): 'Black_Blue',
}

colors_list = [
    [255,0,0], 
    [0,0,255], 
    [0,255,0], 
    [255,255,0], 
    [255,255,255],
    [0,0,0],
    [153,76,0],
    [255,128,0], 
    [153,0,153],
    [255,0,255],
    [255,255,102], 
    [0,0,102],
    [0,153,0], 
    [0,255,255],
    [102,0, 102],
    [51,255,255], 
    [127,0,255], 
    [153,153,0], 
    [51,255,153], 
    [51,0,51],
    [204,0,0],
    [255,51,51],
    [51,153,255],
    [255,255,204],
    [0, 244, 244],
    [0,0,51],
    [0,25,51]
]

color_green_list = [(0,255,0),(0,153,0),(0, 244, 244)]
color_yellow_list = [(255,255,0),(255,255,102),(255,255,204)]
color_blue_list = [(0,0,255),(0,0,102),(51,153,255)]
color_purple_list = [(102,0,102),(51,0,51),(153,0,153)]
color_red_list = [(255,0,0),(204,0,0),(255,51,51)]
color_black_list = [(0,0,0),(0,0,51),(0,25,51)]
color_white_list = [(255,255,255)]
color_orange_list = [(255,128,0)]

color_green = (0,255,0)
color_yellow = (255,255,0)
color_blue = (0,0,255)
color_purple = (102,0,102)
color_red = (255,0,0)
color_black =(0,0,0)
color_white = (255,255,255)
color_orange = (255,128,0)

def fetch_top_colors(req):
    global img_file, img_instance
    if req.method == "POST":
        form = UploadImage(req.POST, req.FILES)
        if form.is_valid():
            if 'img' in req.FILES:
                save = form.save()
                img_instance = form.instance
                img_file = os.path.join(settings.MEDIA_ROOT, str(save.img))
            image = img_instance
            k = int(req.POST['drop_down'])
            img_path = img_file

            with Image.open(img_path) as img_obj:
                img_colors = list(img_obj.getdata())
                if img_obj.mode == 'L':
                    return render(req, 'color_info.html', {'form': form, 'msg': "The image is Grayscale."})
                
                color_counts = defaultdict(int)
                for clr in img_colors:
                    nearest_color = find_nearest_color(clr[:3])
                    color_counts[nearest_color] += 1
                
                total_pixels = sum(color_counts.values())
                color_percentages = {clr: (count / total_pixels) * 100 for clr, count in color_counts.items()}
                
                color_percentages = {get_color(clr): val for clr, val in color_percentages.items()}
                color_percentages = dict(sorted(color_percentages.items(), key=lambda item: item[1], reverse=True)[:k])
                
                context = {
                    'form': form,
                    'image': image,
                    'top_colors': color_percentages
                }
                return render(req, 'color_info.html', context)
    else:
        form = UploadImage()
    images = Upload.objects.all()
    return render(req, 'color_info.html', {"images": images, 'form': form})
def find_nearest_color(color):
    color_lab = rgb2lab(np.array([[color]]))[0][0]
    dist = deltaE_cie76(color_lab, colors_list_lab)
    color_keys = list(color_pallette.keys())
    return color_keys[np.argmin(dist)]
