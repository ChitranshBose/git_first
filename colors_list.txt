red = [(128,0,0), (139, 0, 0), (165, 42, 42), (178, 34, 34), (220, 20, 60), (255, 0, 0), (255, 99, 71), (255, 127, 80), (205, 92, 92), (240, 128, 128), (233, 150, 122), (250, 128, 114), (255, 160, 122), (255, 69, 0)]
orange = [(255, 69, 0), (255, 140, 0), (255, 165, 0)]
green = [(255, 255, 0), (154, 205, 50), (85, 107, 47), (107, 142, 35), (124, 252, 0), (127, 255, 0), (173, 255, 47), (0, 100, 0), (0, 128, 0), (34, 139, 34), (0, 255, 0), (50, 205, 50), (144, 238, 144), (152, 251, 152), (143, 188, 143), (0, 250, 154), (0, 255, 127), (46, 139, 87), (102, 205, 170), (60, 179, 113), (32, 178, 170), (47, 79, 79), (0, 128, 128), (0, 139, 139)
]
blue = (70, 130, 180), (100, 149, 237), (0, 191, 255), (30, 144, 255), (173, 216, 230), (135, 206, 235), (135, 206, 250), (25, 25, 112), (0, 0, 128), (0, 0, 139), (0, 0, 205), (0, 0, 255), (65, 105, 225), (138, 43, 226), (75, 0, 130), (72, 61, 139)



    [128, 0, 0],
    [139, 0, 0],
    [165, 42, 42],
    [178, 34, 34],
    [220, 20, 60],
    [255, 0, 0],
    [255, 99, 71],
    [255, 127, 80],
    [205, 92, 92],
    [240, 128, 128],
    [233, 150, 122],
    [250, 128, 114],
    [255, 160, 122],
    [255, 69, 0],
    [255, 69, 0],
    [255, 140, 0],
    [255, 165, 0],
    [255, 255, 0],
    [154, 205, 50],
    [85, 107, 47],
    [107, 142, 35],
    [124, 252, 0],
    [127, 255, 0],
    [173, 255, 47],
    [0, 100, 0],
    [0, 128, 0],
    [34, 139, 34],
    [0, 255, 0],
    [50, 205, 50],
    [144, 238, 144],
    [152, 251, 152],
    [143, 188, 143],
    [0, 250, 154],
    [0, 255, 127],
    [46, 139, 87],
    [102, 205, 170],
    [60, 179, 113],
    [32, 178, 170],
    [47, 79, 79],
    [0, 128, 128],
    [0, 139, 139],
    [70, 130, 180],
    [100, 149, 237],
    [0, 191, 255],
    [30, 144, 255],
    [173, 216, 230],
    [135, 206, 235],
    [135, 206, 250],
    [25, 25, 112],
    [0, 0, 128],
    [0, 0, 139],
    [0, 0, 205],
    [0, 0, 255],
    [65, 105, 225],

(128, 0, 0): 'Dark Red',
    (139, 0, 0): 'Dark Red',
    (165, 42, 42): 'Brown Red',
    (178, 34, 34): 'Firebrick',
    (220, 20, 60): 'Crimson',
    (255, 0, 0): 'Red',
    (255, 99, 71): 'Tomato',
    (255, 127, 80): 'Coral',
    (205, 92, 92): 'Indian Red',
    (240, 128, 128): 'Light Coral',
    (233, 150, 122): 'Dark Salmon',
    (250, 128, 114): 'Salmon',
    (255, 160, 122): 'Light Salmon',
    (255, 69, 0): 'Red-Orange',
    (255, 69, 0): 'Red-Orange',  # Duplicate entry
    (255, 140, 0): 'Orange Red',
    (255, 165, 0): 'Orange',
    (255, 255, 0): 'Yellow',
    (154, 205, 50): 'Yellow Green',
    (85, 107, 47): 'Dark Olive Green',
    (107, 142, 35): 'Olive Drab',
    (124, 252, 0): 'Lawn Green',
    (127, 255, 0): 'Chartreuse',
    (173, 255, 47): 'Green Yellow',
    (0, 100, 0): 'Dark Green',
    (0, 128, 0): 'Green',
    (34, 139, 34): 'Forest Green',
    (0, 255, 0): 'Lime',
    (50, 205, 50): 'Lime Green',
    (144, 238, 144): 'Light Green',
    (152, 251, 152): 'Pale Green',
    (143, 188, 143): 'Dark Sea Green',
    (0, 250, 154): 'Medium Spring Green',
    (0, 255, 127): 'Spring Green',
    (46, 139, 87): 'Sea Green',
    (102, 205, 170): 'Medium Aqua Marine',
    (60, 179, 113): 'Medium Sea Green',
    (32, 178, 170): 'Light Sea Green',
    (47, 79, 79): 'Dark Slate Gray',
    (0, 128, 128): 'Teal',
    (0, 139, 139): 'Dark Cyan',
    (70, 130, 180): 'Steel Blue',
    (100, 149, 237): 'Cornflower Blue',
    (0, 191, 255): 'Deep Sky Blue',
    (30, 144, 255): 'Dodger Blue',
    (173, 216, 230): 'Light Blue',
    (135, 206, 235): 'Sky Blue',
    (135, 206, 250): 'Light Sky Blue',
    (25, 25, 112): 'Midnight Blue',
    (0, 0, 128): 'Navy',
    (0, 0, 139): 'Dark Blue',
    (0, 0, 205): 'Medium Blue',
    (0, 0, 255): 'Blue',
    (65, 105, 225): 'Royal Blue',
    (138, 43, 226): 'Blue Violet',
    (75, 0, 130): 'Indigo',
    (72, 61, 139): 'Dark Slate Blue'
    [138, 43, 226],
    [75, 0, 130],
    [72, 61, 139]



def find_neareat_color(color):
    clr = color
    #color= colorsys.rgb_to_hsv(color[0], color[1], color[2])
    color = rgb2lab(color)
    color = np.array(color)
    #dist = np.sqrt(np.sum((colors_list_lab -color)**2, axis = 1))
    dist = deltaE_cie76(color, colors_list_lab)
    color_keys = list(color_pallette.keys())
    return color_keys[np.argmin(dist)]

def extract_top_colors(req):
    global img_file, img_instance
    if req.method == "POST":
        form = UploadImage(req.POST, req.FILES)
        if form.is_valid():
            if 'img' in req.FILES:
                save = form.save()
                img_instance = form.instance
                img_file = os.path.join(settings.MEDIA_ROOT, str(save.img))
            image = img_instance
            k = req.POST['drop_down']
            img_path = img_file
            with Image.open(img_path) as img_obj:
                
                img_colors = list(img_obj.getdata())
                
                color = []
                if img_obj.mode=='L':
                    return render(req, 'color_info.html',{'form':form,'msg':"The image is Grayscale."})
                for clr in img_colors:
                    color.append(tuple(find_neareat_color(clr[:3])))
                colors = defaultdict(int)
                
                for clr in color :
                    colors[clr]+=1
                colors = dict(sorted(colors.items(), key = lambda item: item[1], reverse=True))
                #colors = dict(list(colors.items()))
                
                color_dict = {}
                for clr, cnt in Counter(colors).items():
                    
                    if clr in color_green_list:
                        clr = color_green
                    elif clr in color_yellow_list:
                        clr = color_yellow
                        
                    elif clr in color_blue_list:
                        clr = color_blue
                    elif clr in color_purple_list:
                        clr = color_purple
                    elif clr in color_red_list:
                        clr = color_red
                    elif clr in color_black_list:
                        clr = color_black 
                    elif clr in color_orange_list:
                        
                        clr = color_orange
                    elif clr in color_white_list:
                        clr = color_white    
                    color_dict[clr] = cnt
                
                total = sum(Counter(color_dict).values())
                k = min(len(color_dict), int(k))
                for clr, cnt in Counter(color_dict).items():
                    color_dict[clr] = round((cnt/total)*100, 4)
                    
                color_dict = {get_color(clr):val for clr, val in color_dict.items()}
                color_dict = dict(sorted(color_dict.items(), key = lambda item: item[1], reverse=True))
                color_dict = dict(list(color_dict.items())[:k])
                
                context = {
                    'form': form,
                    'image': image,
                    'top_colors': color_dict
                }

                
            return render(req, 'color_info.html',context)
    else:
        form = UploadImage()
    images = Upload.objects.all()
    return render(req, 'color_info.html',{"images":images,'form':form})



